name: build
on:
  push:
    branches:
    - master
jobs:
  build_and_run_docker_container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up CI image name and tag
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="ultracalc-ci"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      # - name: Build Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     builder: ${{ steps.buildx.outputs.name }}
      #     file: CI/Dockerfile
      #     push: false # This would be set to true in a real world deployment scenario.
      #     tags: ${{ steps.prep.outputs.tagged_image }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new

      #   # Temp fix
      #   # https://github.com/docker/build-push-action/issues/252
      #   # https://github.com/moby/buildkit/issues/1896

      - name: Build Docker image
        run: |
          docker buildx build --tag ${{ steps.prep.outputs.tagged_image }} --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new --file CI/Dockerfile --output type=image name=${{ steps.prep.outputs.tagged_image }} . 

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: List built Docker images
        run: docker images

      - name: Build Ultracalc
        run: docker run ${{ steps.prep.outputs.tagged_image }} -- ls -la

      - name: Run unit tests
        run: docker run ${{ steps.prep.outputs.tagged_image }} -- echo running tests
